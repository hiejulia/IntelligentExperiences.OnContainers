apiVersion: apps/v1
kind: Deployment
metadata:
  name: camframe-analyzer
  namespace: crowd-analytics
  labels:
    app: camframe-analyzer
spec:
  selector:
    matchLabels:
      app: camframe-analyzer
  template:
    metadata:
      labels:
        app: camframe-analyzer
    spec:
      containers:
      - name: camframe-analyzer
        image: #{acrName}#/crowdanalytics/camframe-analyzer:#{Build.BuildId}#
        imagePullPolicy: IfNotPresent
        env:
        - name: AzureFunctionsJobHost__functions__0
          value: CamFrameAnalyzer
        envFrom:
        - secretRef:
            name: camframe-analyzer
      # If your AKS Virtual Nodes and ACR is configured correctly, you can schedule the scaling on virtual nodes
      # imagePullSecrets:
      # - name: acrImagePullSecret
      # nodeSelector:
      #   kubernetes.io/role: agent
      #   beta.kubernetes.io/os: linux
      #   type: virtual-kubelet
      # tolerations:
      # - key: virtual-kubelet.io/provider
      #   operator: Exists
      # - key: azure.com/aci
      #   effect: NoSchedule
---
apiVersion: keda.k8s.io/v1alpha1
kind: ScaledObject
metadata:
  name: camframe-analyzer
  namespace: crowd-analytics
  labels:
    deploymentName: camframe-analyzer
spec:
  scaleTargetRef:
    deploymentName: camframe-analyzer
  pollingInterval: 30  # Optional. Default: 30 seconds
  cooldownPeriod:  300 # Optional. Default: 300 seconds
  minReplicaCount: 0   # Optional. Default: 0
  maxReplicaCount: 100 # Optional. Default: 100
  triggers:
  - type: azure-servicebus
    metadata:
      connection: KEDA_SERVICE_BUS_CONNECTION
      topicName: camframe-analysis
      subscriptionName: camframe-analyzer
      queueLength: '10' # This will be used to trigger a scale up operation when number of messages exceed this number
---

